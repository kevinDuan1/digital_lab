@0x00	0x01	// Save value to reg B for Y coordinate
@0x01	0x00	// Load value from RAM@0x00 (0x00) to reg B
@0x02	0x03	// Save Y coordinate in reg B to memory
@0x03	0xB1	// Save Y coordinate to VGA interface Y_VAL
@0x04	0x03	// Save Y coordinate in reg B to memory
@0x05	0x11	// Select memory address RAM@0x11 (current Y coordinate)

@0x06	0x00	// Save value to reg A for X coordinate
@0x07	0x00	// Load value from RAM@0x00 (0x00) to reg A
@0x08	0x02	// Save X coordinate reg A to memory
@0x09	0x10	// Save X coordinate to VGA interface X_VAL
@0x0A	0x02	// Save X coordinate in reg A to memory
@0x0B	0xB0	// Select memory address RAM@0x10 (current X coordinate)

@0x0C   0x00    //Store the memory address that contains value 40 in register A
@0x0D   0x40
@0x0E   0x01    //Load the y coordinate from RAM into register B
@0x0F   0x11	
@0x10   0x96    //Check if y = 40
@0x11   0x36    //jump to pixel data in = 1

@0x12   0x00    //Store the value 80 in register A
@0x13   0x41
@0x14   0x01    //Load the y coordinate from RAM into register B
@0x15   0x11
@0x16   0x96    //Check if y = 80
@0x17   0x36    //jump to pixel data in = 1

@0x18   0x01    //Store the value 54 in register B
@0x19   0x54    
@0x1A   0x00    //Load the x coordinate from RAM into register Y   
@0x1B   0x10
@0x1C   0x96    //Check if x = 54
@0X1D   0x36    //jump to pixel data in = 1

@0x1E   0x01    //Store the value 107 in register B
@0x1F   0x17    
@0x20   0x00    //Load the x coordinate from RAM into register Y   
@0x21   0x10
@0x22   0x96    //Check if x = 107
@0X23   0x36    //jump to pixel data in = 1

@0x24   0x01    // Load the X limit value 160 into reg B for comparison
@0x25   0x20	// Load value from RAM@0x20 to reg B (160)
@0x26   0x00    // Save value to Reg A
@0x27   0x10    // Load value from RAM@0x10 to reg A (current X coordinate)
@0x28   0xA6    // Compare A>B (x > 160), if true branch to:
@0x29   0x27    // Check Y limit
@0x2A   0x54	// Increment X coordinate
@0x2B	0x07	// GOTO:
@0x2C	0x08    // Update X coordinate

@0x2D   0x00    // Load the Y limit value 120 into reg A for comparison
@0x2E   0x21	// Load value from RAM@0x21 to reg B (120)
@0x2F   0x01    // Load the y coordinate stored in register B
@0x30   0x11	// Load value from RAM@0x11 to reg A (current Y coordinate)
@0x31   0xB6    // Check if the value stored in register y > 120
@0x32   0x00    // To beggining of code
@0x33   0x65    // Increment Y coordinate
@0x34   0x07    // GOTO:
@0x35   0x02	// Update variable

@0x36	0x01    // Load the value reg B
@0x37   0x01	// Load value from RAM@0x01 to reg A (PIXEL_DATA_IN foreground) b
@0x38	0x03	// Write to memory from reg B
@0x39	0xB2	// Target address: VGA update pixel data
@0x3A	0x07	// GOTO:
@0x3B   0x24	// Check VGA coordinate limits

