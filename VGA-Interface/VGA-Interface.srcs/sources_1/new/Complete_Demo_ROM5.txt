// This code section is responsible for initializing and interacting with the Mouse and VGA display.
// Mouse Initialisation
@0x00   0x00
@0x01   0xA0    // Read Value of Mouse into register A
@0x02   0x02
@0x03   0xC0    // Write Value of register A to LED Base Address

@0x04   0x00
@0x05   0xA3    // Read Value fron Mouse Scroll Wheel and store in register A
@0x06   0x02
@0x07   0xC1    // Write Value of register A to LED Upper Address
@0x08   0x02
@0x09   0xB4    // Write Value of register A to VGA Colour


@0x0A   0x00
@0x0B   0x0A    // Read Previous Mouse X Position from RAM into register A
@0x0C   0x01
@0x0D   0x0B    // Read Previous Mouse Y Position from RAM into register B
@0x0E   0x02
@0x0F   0xB0    // Write Value of register A to VGA X Coordinate
@0x10   0x03
@0x11   0xB1    // Write Value of register B to VGA Y Coordinate
@0x12   0x00
@0x13   0x14    // Read "0" from RAM and store in register A
@0x14   0x02
@0x15   0xB2    // Write Value of register A to VGA Pixel


// Write Cursor Position to VGA
@0x16   0x00
@0x17   0xA1    // Read Value of Current Mouse X Position into register A
@0x18   0x01
@0x19   0xA2    // Read Value of Current Mouse Y Position into register B
@0x1A   0x02
@0x1B   0xD0    // Write Value of register A to 7 Segment (Lower Digits)
@0x1C   0x03
@0x1D   0xD1    // Write Value of register B to 7 Segment (Upper Digits)

@0x1E   0x00  
@0x1F   0xA1    // Read Value from Current Mouse X Position and store in register A
@0x20   0x01
@0x21   0xA2    // Read Value from Current Mouse Y Position and store in register B

@0x22   0x02
@0x23   0xB0    // Write Value of register A to VGA X Coordinate
@0x24   0x03
@0x25   0xB1    // Write Value of register B to VGA Y Coordinate

@0x26   0x02
@0x27   0x0A    // Write Value of register A to RAM Address
@0x28   0x03
@0x29   0x0B    // Write Value of register B to RAM Address

// A Method can detect the pixel information and delete the previous Mouse path
@0x2A   0x00    
@0x2B   0xB3    // Read the pixel information into register A
@0x2C   0X02    
@0x2D   0X14    // Store the signal from register A in RAM
   
@0x2E   0x01    // Load 0 to register B
@0x2F   0x15    

@0x30   0x96    // If signal is equal or not
@0x31   0x38    // Jump to read 1

@0x32   0x00    
@0x33   0x00    // Read "0" from RAM into register A
@0x34   0x02
@0x35   0xB2    // Write Value of register A to VGA Pixel
@0x36   0x07
@0x37	0x3C

@0x38   0x00    
@0x39   0x01    //  Read "1" from RAM into register A
@0x3A   0x02  
@0x3B   0xB2    // Write Value of register A to VGA Pixel




//IR INITIALISATION

//**********Check X position of cursor**********//
@0x3C   0x00
@0x3D   0xA1    // Read value of Live Mouse X Position to Reg A

//Left Side Screen
@0x3E   0x01
@0x3F   0x54    // Load left boundary to Reg B
@0x40   0xB6    // Check if X coordinate < boundary go to
@0x41   0x48    // Check Y coordinate

//Middle Side Screen
@0x42   0x01    // else if, check middle boundary
@0x43   0x17    // Load middle boundary to Reg B
@0x44   0xB6    // Check if X coordinate < boundary go to
@0x45   0x54    //Check Y coordinate for middle boundary

// Check Last column
@0x46   0x07  //else, go to
@0x47   0x60 //Check Y coordinate for right boundary

//**********Check Y position of Cursor for Left Boundary**********//
@0x48   0x00
@0x49   0xA2    //Read value of Live Mouse Y Position to Reg A

//Top Row of Screen
@0x4A   0x01
@0x4B   0x40    //Load Top Y boundary to reg B
@0x4C   0xB6    //If Y coordinate in reg A  < boundary go to
@0x4D   0x6C    //ROM Adress for top left command

//Middle Row of Screen
@0x4E   0x01
@0x4F   0x41    //else if, load middle boundary to reg B
@0x50   0xB6    //Check if Top Row Boundary < Y coordinate < Middle Row Boundary go to
@0x51   0x72    //ROM Adress for Left Command

//Bottom Row of Screen
@0x52   0x07    //Go to
@0x53   0x78    //ROM Address for backward left command

//**********Check Y position of cursor for Middle Boundary**********//

@0x54   0x00
@0x55   0xA2    //Read value of Live Mouse Y Position to Reg A

//Top Row of Screen
@0x56   0x01
@0x57   0x40    //Load Top Y boundary to reg B
@0x58   0xB6    //If Y coordinate in reg A  < boundary go to
@0x59   0x7E    //ROM Adress for forward command

//Middle Row of Screen
@0x5A   0x01
@0x5B   0x41    //else if, load middle boundary to reg B
@0x5C   0xB6    //Check if Top Row Boundary < Y coordinate < Middle Row Boundary go to
@0x5D   0x84    //ROM Adress IDLE command

//Bottom Row of Screen
@0x5E   0x07    //Go to
@0x5F   0x8A    //ROM Address for backward command

//**********Check Y position of cursor for Right Boundary**********//

@0x60   0x00
@0x61   0xA2    //Read value of Live Mouse Y Position to Reg A

//Top Row of Screen
@0x62  0x01
@0x63   0x40    //Load Top Y boundary to reg B
@0x64   0xB6    //If Y coordinate in reg A  < boundary go to
@0x65   0x90    //ROM Adress for forward right command

//Middle Row of Screen
@0x66   0x01
@0x67   0x41    //else if, load middle boundary to reg B
@0x68   0xB6    //Check if Top Row Boundary < Y coordinate < Middle Row Boundary go to
@0x69   0x96    //ROM Adress right command

//Bottom Row of Screen
@0x6A   0x07    //Go to
@0x6B   0x9C    //ROM Address for backward right command

//**********CAR COMMAND**********//

//Forward Left Command
@0x6C   0x01
@0x6D   0x24    //Load FL command from mem to reg B
@0x6E   0x03
@0x6F   0x90    //Load FL command from reg B to IR Transmitter
@0x70   0x07    //Jump to check address again
@0x71   0xA2    //Check X address

//Left Command
@0x72   0x01
@0x73   0x22    //Load L command from mem to reg B
@0x74   0x03
@0x75   0x90    //Load L command from B to IR Transmitter
@0x76   0x07    //Jump to check address again
@0x77   0xA2    //Check X address

//Backward Left Command
@0x78  0x01  
@0x79   0x26    //Load BL command from mem to reg B
@0x7A   0x03
@0x7B   0x90    //Load BL command from B to IR Transmitter
@0x7C   0x07    //Jump to check address again
@0x7D   0xA2    //Check X address

//Forward Command
@0x7E   0x01
@0x7F   0x20
@0x80   0x03
@0x81   0x90
@0x82   0x07    //Jump to check address again
@0x83   0xA2    //Check X address

//IDLE
@0x84   0x01
@0x85   0x28
@0X86   0x03
@0x87   0x90
@0x88   0x07    //Jump to check address again
@0x89   0xA2    //Check X address

//Backward Command
@0x8A   0x01
@0x8B   0x21
@0x8C   0x03
@0x8D   0x90
@0x8E   0x07    //Jump to check address again
@0x8F   0xA2    //Check X address

//Forward Right Command
@0x90   0x01
@0x91   0x25
@0x92   0x03
@0x93   0x90
@0x94   0x07    //Jump to check address again
@0x95   0xA2    //Check X address

//Right Command
@0x96   0x01
@0x97   0x23
@0x98   0x03
@0x99   0x90
@0x9A   0x07    //Jump to check address again
@0x9B   0xA2    //Check X address

//Backward Right Command
@0x9C   0x01
@0x9D   0x27
@0x9E   0x03
@0x9F   0x90
@0xA0   0x07    //Jump to check address again
@0xA1   0xA2    //Check X address

@0xA2   0x08
// Mouse Interrupt
@0xFF   0x00    // Mouse Interrupt Go To