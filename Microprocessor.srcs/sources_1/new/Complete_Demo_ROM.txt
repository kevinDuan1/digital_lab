@0x00	0x01	// Save value to reg B for Y coordinate
@0x01	0x00	// Load value from RAM@0x00 (0x00) to reg B
@0x02	0x03	// Save Y coordinate in reg B to memory
@0x03	0xB1	// Save Y coordinate to VGA interface Y_VAL
@0x04	0x03	// Save Y coordinate in reg B to memory
@0x05	0x11	// Select memory address RAM@0x11 (current Y coordinate)

@0x06	0x00	// Save value to reg A for X coordinate
@0x07	0x00	// Load value from RAM@0x00 (0x00) to reg A
@0x08	0x02	// Save X coordinate reg A to memory
@0x09	0x10	// Save X coordinate to VGA interface X_VAL
@0x0A	0x02	// Save X coordinate in reg A to memory
@0x0B	0xB0	// Select memory address RAM@0x10 (current X coordinate)

@0x0C   0x00    // Save value to reg A
@0x0D   0x00    // Load value from RAM@0x00 (0x00) to reg B - for modulus comparison
@0x0E   0x01    // Save value to reg B
@0x0F   0x11    // Load value from RAM@0x11 (current Y coordinate) to reg B
@0x10   0xD5    // Take modulus of reg B (Y coordinate), store in reg B
@0x11   0x96    // Compare A=B, if true branch to:
@0x12   0x1C    // Check Y value

@0x13   0x01    // Load the X limit value 160 into reg B for comparison
@0x14   0x20	// Load value from RAM@0x20 to reg B (160)
@0x15   0x00    // Save value to Reg A
@0x16   0x10    // Load value from RAM@0x10 to reg A (current X coordinate)
@0x17   0xA6    // Compare A>B (x > 160), if true branch to:
@0x18   0x27    // Check Y limit
@0x19   0x54	// Increment X coordinate
@0x1A	0x07	// GOTO:
@0x1B	0x08    // Update X coordinate

@0x1C   0x01    // Save value to reg B
@0x1D   0x00    // Load value from RAM@0x00 (0x00) to reg B - for modulus comparison
@0x1E   0x00    // Save value to reg A
@0x1F   0x10    // Load value from RAM@0x10 (current X coordinate) to reg B
@0x20   0xC4    // Take modulus of reg A (Y coordinate), store in reg A
@0x21   0x96    // Compare A=B, if true branch to:
@0x22   0x2E    // Set PIXEL data to 1
@0x23   0x07    // Branch to:
@0x24   0x32    // Check X limit

@0x25   0x00    // Load the Y limit value 120 into reg A for comparison
@0x26   0x21	// Load value from RAM@0x21 to reg B (120)
@0x27   0x01    // Load the y coordinate stored in register B
@0x28   0x11	// Load value from RAM@0x11 to reg A (current Y coordinate)
@0x29   0xB6    // Check if the value stored in register y > 120
@0x2A   0x00    // To beggining of code
@0x2B   0x65    // Increment Y coordinate
@0x2C   0x07    // GOTO:
@0x2D   0x02	// Update variable

@0x2E	0x01    // Load the value reg B
@0x2F   0x01	// Load value from RAM@0x01 to reg A (PIXEL_DATA_IN foreground) b
@0x30	0x03	// Write to memory from reg B
@0x31	0xB2	// Target address: VGA update pixel data
@0x32	0x07	// GOTO:
@0x33   0x13	// Check VGA coordinate limits
	
// Mouse
@0xF1   0x00 
@0xF2   0xA0 
@0xF3   0x02 
@0xF4   0xF0 

@0xF5   0x00 
@0xF6   0xA1 
@0xF7   0x02 
@0xF8   0xD0 

@0xF9   0x00 
@0xFA   0xA2
@0xFB   0x02
@0xFC   0xD1
@0xFD   0x0A

@0xFF   0xF1